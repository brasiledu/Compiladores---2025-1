# Generated from TimemaniaLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing import TextIO


def serializedATN():
    return [
        4,0,22,174,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,
        8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,12,1,13,4,13,137,8,13,11,13,12,13,138,1,14,1,14,5,14,
        143,8,14,10,14,12,14,146,9,14,1,15,1,15,5,15,150,8,15,10,15,12,15,
        153,9,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
        1,20,1,20,1,21,4,21,169,8,21,11,21,12,21,170,1,21,1,21,1,151,0,22,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,1,0,8,1,0,
        48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,44,
        44,59,59,3,0,42,43,45,45,47,47,1,0,40,41,2,0,123,123,125,125,3,0,
        9,10,13,13,32,32,177,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
        0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,54,1,0,
        0,0,5,66,1,0,0,0,7,76,1,0,0,0,9,83,1,0,0,0,11,89,1,0,0,0,13,93,1,
        0,0,0,15,96,1,0,0,0,17,102,1,0,0,0,19,108,1,0,0,0,21,117,1,0,0,0,
        23,122,1,0,0,0,25,130,1,0,0,0,27,136,1,0,0,0,29,140,1,0,0,0,31,147,
        1,0,0,0,33,156,1,0,0,0,35,159,1,0,0,0,37,161,1,0,0,0,39,163,1,0,
        0,0,41,165,1,0,0,0,43,168,1,0,0,0,45,46,5,102,0,0,46,47,5,108,0,
        0,47,48,5,97,0,0,48,49,5,109,0,0,49,50,5,101,0,0,50,51,5,110,0,0,
        51,52,5,103,0,0,52,53,5,111,0,0,53,2,1,0,0,0,54,55,5,99,0,0,55,56,
        5,111,0,0,56,57,5,114,0,0,57,58,5,105,0,0,58,59,5,110,0,0,59,60,
        5,116,0,0,60,61,5,104,0,0,61,62,5,105,0,0,62,63,5,97,0,0,63,64,5,
        110,0,0,64,65,5,115,0,0,65,4,1,0,0,0,66,67,5,112,0,0,67,68,5,97,
        0,0,68,69,5,108,0,0,69,70,5,109,0,0,70,71,5,101,0,0,71,72,5,105,
        0,0,72,73,5,114,0,0,73,74,5,97,0,0,74,75,5,115,0,0,75,6,1,0,0,0,
        76,77,5,115,0,0,77,78,5,97,0,0,78,79,5,110,0,0,79,80,5,116,0,0,80,
        81,5,111,0,0,81,82,5,115,0,0,82,8,1,0,0,0,83,84,5,115,0,0,84,85,
        5,116,0,0,85,86,5,97,0,0,86,87,5,114,0,0,87,88,5,116,0,0,88,10,1,
        0,0,0,89,90,5,101,0,0,90,91,5,110,0,0,91,92,5,100,0,0,92,12,1,0,
        0,0,93,94,5,115,0,0,94,95,5,101,0,0,95,14,1,0,0,0,96,97,5,101,0,
        0,97,98,5,110,0,0,98,99,5,116,0,0,99,100,5,97,0,0,100,101,5,111,
        0,0,101,16,1,0,0,0,102,103,5,115,0,0,103,104,5,101,0,0,104,105,5,
        110,0,0,105,106,5,97,0,0,106,107,5,111,0,0,107,18,1,0,0,0,108,109,
        5,101,0,0,109,110,5,110,0,0,110,111,5,113,0,0,111,112,5,117,0,0,
        112,113,5,97,0,0,113,114,5,110,0,0,114,115,5,116,0,0,115,116,5,111,
        0,0,116,20,1,0,0,0,117,118,5,102,0,0,118,119,5,97,0,0,119,120,5,
        99,0,0,120,121,5,97,0,0,121,22,1,0,0,0,122,123,5,101,0,0,123,124,
        5,115,0,0,124,125,5,99,0,0,125,126,5,114,0,0,126,127,5,101,0,0,127,
        128,5,118,0,0,128,129,5,97,0,0,129,24,1,0,0,0,130,131,5,108,0,0,
        131,132,5,101,0,0,132,133,5,105,0,0,133,134,5,97,0,0,134,26,1,0,
        0,0,135,137,7,0,0,0,136,135,1,0,0,0,137,138,1,0,0,0,138,136,1,0,
        0,0,138,139,1,0,0,0,139,28,1,0,0,0,140,144,7,1,0,0,141,143,7,2,0,
        0,142,141,1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,
        0,145,30,1,0,0,0,146,144,1,0,0,0,147,151,5,34,0,0,148,150,9,0,0,
        0,149,148,1,0,0,0,150,153,1,0,0,0,151,152,1,0,0,0,151,149,1,0,0,
        0,152,154,1,0,0,0,153,151,1,0,0,0,154,155,5,34,0,0,155,32,1,0,0,
        0,156,157,5,58,0,0,157,158,5,61,0,0,158,34,1,0,0,0,159,160,7,3,0,
        0,160,36,1,0,0,0,161,162,7,4,0,0,162,38,1,0,0,0,163,164,7,5,0,0,
        164,40,1,0,0,0,165,166,7,6,0,0,166,42,1,0,0,0,167,169,7,7,0,0,168,
        167,1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,
        172,1,0,0,0,172,173,6,21,0,0,173,44,1,0,0,0,5,0,138,144,151,170,
        1,6,0,0
    ]

class TimemaniaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    FLAMENGO = 1
    CORINTHIANS = 2
    PALMEIRAS = 3
    SANTOS = 4
    START = 5
    END = 6
    SE = 7
    ENTAO = 8
    SENAO = 9
    ENQUANTO = 10
    FACA = 11
    ESCREVA = 12
    LEIA = 13
    NUMBER = 14
    ID = 15
    STRING = 16
    ASSIGN = 17
    DELIMITER = 18
    OPERATOR = 19
    PARENTESE = 20
    CHAVE = 21
    WS = 22
    VASCO = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'flamengo'", "'corinthians'", "'vasco'", "'palmeiras'", "'santos'", "'start'", 
            "'end'", "'se'", "'entao'", "'senao'", "'enquanto'", "'faca'", 
            "'escreva'", "'leia'", "':='" ]

    symbolicNames = [ "<INVALID>",
            "FLAMENGO", "CORINTHIANS","VASCO", "PALMEIRAS", "SANTOS", "START", "END", 
            "SE", "ENTAO", "SENAO", "ENQUANTO", "FACA", "ESCREVA", "LEIA", 
            "NUMBER", "ID", "STRING", "ASSIGN", "DELIMITER", "OPERATOR", 
            "PARENTESE", "CHAVE", "WS" ]

    ruleNames = [ "FLAMENGO", "CORINTHIANS", "VASCO", "PALMEIRAS", "SANTOS", "START", 
                  "END", "SE", "ENTAO", "SENAO", "ENQUANTO", "FACA", "ESCREVA", 
                  "LEIA", "NUMBER", "ID", "STRING", "ASSIGN", "DELIMITER", 
                  "OPERATOR", "PARENTESE", "CHAVE", "WS" ]

    grammarFileName = "TimemaniaLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


